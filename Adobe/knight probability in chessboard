class Solution {
    public boolean isValid(int r,int c,int n){
        if(r>=0 && r<n && c>=0 && c<n){
            return true;
        }else{
            return false;
        }
    }
    public double knightProbability(int n, int k, int row, int column) {
        double curr[][]=new double[n][n];
        double next[][]=new double[n][n];
        
        curr[row][column]=1;
        for(int m=0;m<k;m++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(curr[i][j]!=0){

                        int ni=0,nj=0;

                        ni=i+2;
                        nj=j+1;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i+2;
                        nj=j-1;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i-2;
                        nj=j+1;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i-2;
                        nj=j-1;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i+1;
                        nj=j+2;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i+1;
                        nj=j-2;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i-1;
                        nj=j+2;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }
                         ni=i-1;
                        nj=j-2;
                        if(isValid(ni,nj,n)){
                            next[ni][nj]+=curr[i][j]/8.0;
                        }

                    }
                }
                
            }
            curr=next;
                next=new double[n][n];
        }
        double sum=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
               sum+=curr[i][j];
            }
        } 
        return sum; 
        
    }
}
